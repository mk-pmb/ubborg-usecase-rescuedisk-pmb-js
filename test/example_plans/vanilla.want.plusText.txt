+ stage[example_plans/vanilla]
  = deferredDebPkgs: {"policy": {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}, "updatePkgLists": true, "modifies": 113, "installs": […
  + bundle[cjs:ubborg-usecase-rescuedisk-pmb]
    + osUser[urd]
      = disablePasswordLogin: false
      = exists: true
      = homeDirPath: "/var/lib/ubborg-usecase-rescuedisk-pmb"
      = interactive: true
      = passwordHash: "$6$fake…$==bo…"
      = preserveExistingPasswordHash: false
      = shell: "bash"
      = userIdNum: 942
      + osUserLogin[…]
        = disablePasswordLogin: false
        = exists: true
        = homeDirPath: "/var/lib/ubborg-usecase-rescuedisk-pmb"
        = interactive: true
        = passwordHash: "$6$fake…$==bo…"
        = preserveExistingPasswordHash: false
        = shell: "bash"
        = userIdNum: 942
        - osUserLogin[…]
      + osUserGroupMembership[…|urd]
        = grName: "urd"
        = loginName: "urd"
        = member: true
        ^ osUserLogin[urd]
        + osUserGroup[urd]
          = exists: true
          = interactive: false
          - osUserGroup[urd]
        - osUserGroupMembership[…|urd]
      + osUserGroupMembership[…|netdev]
        = grName: "netdev"
        = loginName: "urd"
        = member: true
        ^ osUserLogin[urd]
        + osUserGroup[netdev]
          = exists: true
          = interactive: false
          - osUserGroup[netdev]
        - osUserGroupMembership[…|netdev]
      + osUserGroupMembership[…|dialout]
        = grName: "dialout"
        = loginName: "urd"
        = member: true
        ^ osUserLogin[urd]
        + osUserGroup[dialout]
          = exists: true
          = interactive: false
          - osUserGroup[dialout]
        - osUserGroupMembership[…|dialout]
      + osUserGroupMembership[…|fuse]
        = grName: "fuse"
        = loginName: "urd"
        = member: true
        ^ osUserLogin[urd]
        + osUserGroup[fuse]
          = exists: true
          = interactive: false
          - osUserGroup[fuse]
        - osUserGroupMembership[…|fuse]
      + osUserGroupMembership[…|saned]
        = grName: "saned"
        = loginName: "urd"
        = member: true
        ^ osUserLogin[urd]
        + osUserGroup[saned]
          = exists: true
          = interactive: false
          - osUserGroup[saned]
        - osUserGroupMembership[…|saned]
      + osUserGroupMembership[…|lp]
        = grName: "lp"
        = loginName: "urd"
        = member: true
        ^ osUserLogin[urd]
        + osUserGroup[lp]
          = exists: true
          = interactive: false
          - osUserGroup[lp]
        - osUserGroupMembership[…|lp]
      + osUserGroupMembership[…|adm]
        = grName: "adm"
        = loginName: "urd"
        = member: true
        ^ osUserLogin[urd]
        + osUserGroup[adm]
          = exists: true
          = interactive: false
          - osUserGroup[adm]
        - osUserGroupMembership[…|adm]
      + osUserGroupMembership[…|sudo]
        = grName: "sudo"
        = loginName: "urd"
        = member: true
        ^ osUserLogin[urd]
        + osUserGroup[sudo]
          = exists: true
          = interactive: false
          - osUserGroup[sudo]
        - osUserGroupMembership[…|sudo]
      - osUser[urd]
    + iniFile[/var/lib/AccountsService/users/urd]
      + file[…]
        = mimeType: "text/plain"
        + file[/var/lib/AccountsService/users]
          = mimeType: "inode/directory"
          + file[/var/lib/AccountsService]
            = mimeType: "inode/directory"
            + file[/var/lib]
              = mimeType: "inode/directory"
              + file[/var]
                = mimeType: "inode/directory"
                - file[/var]
              - file[/var/lib]
            - file[/var/lib/AccountsService]
          - file[/var/lib/AccountsService/users]
        - file[…]
      + iniFileSect[…|User]
        = exists: true
        = path: "/var/lib/AccountsService/users/urd"
        = sect: "User"
        - iniFileSect[…|User]
      + iniFileOpt[…|User|XSession]
        = key: "XSession"
        = path: "/var/lib/AccountsService/users/urd"
        = sect: "User"
        = val: "openbox"
        ^ iniFileSect[/var/lib/AccountsService/users/urd|User]
        - iniFileOpt[…|User|XSession]
      + iniFileOpt[…|User|XKeyboardLayouts]
        = key: "XKeyboardLayouts"
        = path: "/var/lib/AccountsService/users/urd"
        = sect: "User"
        = val: ""
        ^ iniFileSect[/var/lib/AccountsService/users/urd|User]
        - iniFileOpt[…|User|XKeyboardLayouts]
      - iniFile[/var/lib/AccountsService/users/urd]
    + bundle[…/src/lightdm/autologin]
      = param: {"loginName": "urd"}
      + debPkg[lightdm]
        = defer: true
        = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
        = state: "installed"
        - debPkg[lightdm]
      + file[/etc/lightdm/user_session_prefs]
        = content: "/var/lib/AccountsService/users"
        = mimeType: "inode/symlink"
        + file[/etc/lightdm]
          = mimeType: "inode/directory"
          + file[/etc]
            = mimeType: "inode/directory"
            - file[/etc]
          - file[/etc/lightdm]
        - file[/etc/lightdm/user_session_prefs]
      + file[/etc/lightdm/lightdm.conf.d/autologin.conf]
        = content: ["[Seat:*]\n",
¬¶            "autologin-session=lightdm-autologin\n",
¬¶            "autologin-guest=no\n",
¬¶            "autologin-user=urd\n",
¬¶            "autologin-user-timeout=0\n"]
        = enforcedGroup: "adm"
        = enforcedModes: "a=r,ug+w"
        = enforcedOwner: "root"
        = mimeType: "text/plain"
        + file[/etc/lightdm/lightdm.conf.d]
          = mimeType: "inode/directory"
          ^ file[/etc/lightdm]
          - file[/etc/lightdm/lightdm.conf.d]
        - file[/etc/lightdm/lightdm.conf.d/autologin.conf]
      - bundle[…/src/lightdm/autologin]
    + bundle[…/src/software/]
      + bundle[…basicImageEditing]
        + debPkg[mtpaint]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[mtpaint]
        + debPkg[imagemagick]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[imagemagick]
        - bundle[…basicImageEditing]
      + bundle[…configMgmt]
        + debPkg[crudini]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[crudini]
        + debPkg[ansible]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[ansible]
        - bundle[…configMgmt]
      + bundle[…dataRecovery]
        + debPkg[gddrescue]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[gddrescue]
        - bundle[…dataRecovery]
      + bundle[…debPkgUtil]
        + debPkg[apt]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[apt]
        + debPkg[aptitude]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[aptitude]
        - bundle[…debPkgUtil]
      + bundle[…debugUtil]
        + debPkg[acpi]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[acpi]
        + debPkg[colordiff]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[colordiff]
        + debPkg[debconf-utils]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[debconf-utils]
        + debPkg[file]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[file]
        + debPkg[htop]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[htop]
        + debPkg[iotop]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[iotop]
        + debPkg[lsof]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[lsof]
        + debPkg[mmc-utils]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[mmc-utils]
        + debPkg[units]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[units]
        - bundle[…debugUtil]
      + bundle[…dialogScripting]
        + debPkg[gxmessage]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[gxmessage]
        + debPkg[x11-utils]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[x11-utils]
        + debPkg[zenity]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[zenity]
        + debPkg[yad]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[yad]
        + debPkg[alltray]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[alltray]
        - bundle[…dialogScripting]
      + bundle[…diskPartMgmt]
        + debPkg[util-linux]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[util-linux]
        + debPkg[gparted]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[gparted]
        + debPkg[gpart]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[gpart]
        + debPkg[dosfstools]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[dosfstools]
        + debPkg[mtools]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[mtools]
        + debPkg[lvm2]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[lvm2]
        + debPkg[cryptsetup]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[cryptsetup]
        + debPkg[cryptsetup-initramfs]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[cryptsetup-initramfs]
        + file[/PL]
          = content: "dev/disk/by-partlabel"
          = mimeType: "inode/symlink"
          - file[/PL]
        - bundle[…diskPartMgmt]
      + bundle[…diskSmart]
        + debPkg[smartmontools]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[smartmontools]
        + debPkg[nullmailer]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[nullmailer]
        - bundle[…diskSmart]
      + bundle[…fileSystems]
        + debPkg[udisks2]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[udisks2]
        + debPkg[udiskie]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[udiskie]
        + debPkg[fatresize]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[fatresize]
        + debPkg[exfat-fuse]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[exfat-fuse]
        + debPkg[exfat-utils]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[exfat-utils]
        + debPkg[ntfs-3g]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[ntfs-3g]
        - bundle[…fileSystems]
      + bundle[…fileViewers]
        + debPkg[eog]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[eog]
        + debPkg[gpicview]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[gpicview]
        + debPkg[evince]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[evince]
        + debPkg[okular]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[okular]
        - bundle[…fileViewers]
      + bundle[…grub]
        + debPkg[grub2-common]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[grub2-common]
        + debPkg[grub-efi-amd64-bin]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[grub-efi-amd64-bin]
        + debPkg[grub-efi-ia32-bin]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[grub-efi-ia32-bin]
        + debPkg[grub-pc-bin]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[grub-pc-bin]
        - bundle[…grub]
      + bundle[…kernel]
        + debPkg[linux-image-lowlatency]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[linux-image-lowlatency]
        - bundle[…kernel]
      + bundle[…math]
        + debPkg[bc]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[bc]
        + debPkg[gnumeric]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[gnumeric]
        + debPkg[wxmaxima]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[wxmaxima]
        - bundle[…math]
      + bundle[…networkBasics]
        + debPkg[avahi-daemon]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[avahi-daemon]
        + debPkg[avahi-utils]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[avahi-utils]
        + debPkg[ifupdown]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[ifupdown]
        + debPkg[libnss-mdns]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[libnss-mdns]
        + debPkg[libnss-myhostname]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[libnss-myhostname]
        + debPkg[net-tools]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[net-tools]
        + debPkg[networkd-dispatcher]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[networkd-dispatcher]
        + debPkg[network-manager]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[network-manager]
        - bundle[…networkBasics]
      + bundle[…networkDataTransfer]
        + debPkg[axel]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[axel]
        + debPkg[curl]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[curl]
        + debPkg[netcat]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = presenceMarker: "cmd:"
          = state: "installed"
          - debPkg[netcat]
        + debPkg[socat]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[socat]
        + debPkg[wget]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[wget]
        - bundle[…networkDataTransfer]
      + bundle[…networkDebug]
        + debPkg[iputils-ping]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = presenceMarker: "cmd:ping"
          = state: "installed"
          - debPkg[iputils-ping]
        ^ debPkg[netcat]
        - bundle[…networkDebug]
      + bundle[…openbox]
        + debPkg[openbox]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[openbox]
        + debPkg[obconf]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[obconf]
        + debPkg[python-xdg]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[python-xdg]
        + debPkg[wbar]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[wbar]
        + debPkg[wbar-config]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[wbar-config]
        + debPkg[gnome-accessibility-themes]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = presenceMarker: "file:/usr/share/icons/HighContrast/32x32/"
          = state: "installed"
          - debPkg[gnome-accessibility-themes]
        + debPkg[wmbattery]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[wmbattery]
        + debPkg[wmbubble]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[wmbubble]
        - bundle[…openbox]
      + bundle[…remoteDesktop]
        + debPkg[x11vnc]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[x11vnc]
        + debPkg[remmina]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[remmina]
        - bundle[…remoteDesktop]
      + bundle[…remoteShell]
        + debPkg[openssh-server]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[openssh-server]
        + debPkg[haveged]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[haveged]
        - bundle[…remoteShell]
      + bundle[…rtfm]
        + debPkg[man]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[man]
        - bundle[…rtfm]
      + bundle[…shell]
        + debPkg[bash]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[bash]
        + debPkg[bash-completion]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[bash-completion]
        + debPkg[mingetty]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[mingetty]
        + debPkg[screen]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[screen]
        + debPkg[tmux]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[tmux]
        + debPkg[less]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[less]
        + debPkg[moreutils]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[moreutils]
        + debPkg[nano]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[nano]
        + debPkg[procps]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[procps]
        + debPkg[pv]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[pv]
        + debPkg[rename]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[rename]
        + debPkg[rlwrap]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[rlwrap]
        + debPkg[psmisc]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[psmisc]
        - bundle[…shell]
      + bundle[…sysCore]
        + debPkg[ubuntu-minimal]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[ubuntu-minimal]
        + debPkg[anacron]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[anacron]
        + debPkg[console-data]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[console-data]
        + debPkg[initramfs-tools]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[initramfs-tools]
        + debPkg[keyboard-configuration]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[keyboard-configuration]
        + debPkg[logrotate]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[logrotate]
        + debPkg[perl]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[perl]
        + debPkg[systemd]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[systemd]
        - bundle[…sysCore]
      + bundle[…terminalEmus]
        + debPkg[sakura]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[sakura]
        + debPkg[gnome-terminal]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[gnome-terminal]
        + debPkg[dconf-cli]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[dconf-cli]
        - bundle[…terminalEmus]
      + bundle[…textEditors]
        + debPkg[featherpad]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[featherpad]
        + debPkg[mousepad]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[mousepad]
        - bundle[…textEditors]
      + bundle[…ubuntuBasePkgLists]
        + debPkgRepo[ubuntu_security]
          = components: ["main", "restricted", "universe", "multiverse"]
          = deferPkgListUpdate: true
          = dists: ["focal-security"]
          = src: true
          = state: "enabled"
          = urls: ["http://security.ubuntu.com/ubuntu"]
          + file[/etc/apt/sources.list.d/ubborg.ubuntu_security.list]
            = content: ["# generated by ubborg-planner-pmb\n",
¬¶            "deb     http://security.ubuntu.com/ubuntu focal-security main restricted universe multiverse\n",
¬¶            "deb-src http://security.ubuntu.com/ubuntu focal-security main restricted universe multiverse\n"]
            = enforcedGroup: "adm"
            = enforcedModes: "a=r,ug+w"
            = enforcedOwner: "root"
            = mimeType: "text/plain"
            + file[/etc/apt/sources.list.d]
              = mimeType: "inode/directory"
              + file[/etc/apt]
                = mimeType: "inode/directory"
                ^ file[/etc]
                - file[/etc/apt]
              - file[/etc/apt/sources.list.d]
            - file[/etc/apt/sources.list.d/ubborg.ubuntu_security.list]
          - debPkgRepo[ubuntu_security]
        + debPkgRepo[ubuntu_base]
          = components: ["main", "restricted", "universe", "multiverse"]
          = deferPkgListUpdate: true
          = dists: ["focal", "focal-backports", "focal-updates", "focal-proposed"]
          = src: true
          = state: "enabled"
          = urls: ["http://de.archive.ubuntu.com/ubuntu"]
          + file[/etc/apt/sources.list.d/ubborg.ubuntu_base.list]
            = content: ["# generated by ubborg-planner-pmb\n",
¬¶            "deb     http://de.archive.ubuntu.com/ubuntu focal main restricted universe multiverse\n",
¬¶            "deb-src http://de.archive.ubuntu.com/ubuntu focal main restricted universe multiverse\n",
¬¶            "deb     http://de.archive.ubuntu.com/ubuntu focal-backports main restricted universe multiverse\n",
¬¶            "deb-src http://de.archive.ubuntu.com/ubuntu focal-backports main restricted universe multiverse\n",
¬¶            "deb     http://de.archive.ubuntu.com/ubuntu focal-updates main restricted universe multiverse\n",
¬¶            "deb-src http://de.archive.ubuntu.com/ubuntu focal-updates main restricted universe multiverse\n",
¬¶            "deb     http://de.archive.ubuntu.com/ubuntu focal-proposed main restricted universe multiverse\n",
¬¶            "deb-src http://de.archive.ubuntu.com/ubuntu focal-proposed main restricted universe multiverse\n"]
            = enforcedGroup: "adm"
            = enforcedModes: "a=r,ug+w"
            = enforcedOwner: "root"
            = mimeType: "text/plain"
            ^ file[/etc/apt/sources.list.d]
            - file[/etc/apt/sources.list.d/ubborg.ubuntu_base.list]
          - debPkgRepo[ubuntu_base]
        - bundle[…ubuntuBasePkgLists]
      + bundle[…vcs]
        + debPkg[git]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[git]
        + debPkg[git-annex]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[git-annex]
        - bundle[…vcs]
      + bundle[…xorgBasics]
        + debPkg[unity-greeter]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[unity-greeter]
        + debPkg[x11-xserver-utils]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[x11-xserver-utils]
        + debPkg[xdotool]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[xdotool]
        + debPkg[xserver-xorg]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[xserver-xorg]
        + debPkg[xsel]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[xsel]
        + debPkg[scrot]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[scrot]
        + debPkg[wmctrl]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[wmctrl]
        - bundle[…xorgBasics]
      - bundle[…/src/software/]
    + bundle[…/src/workarounds/]
      = param: {"loginName": "urd"}
      + bundle[…avoidAccidentialTouchpadTap]
        + debPkg[xserver-xorg-input-synaptics]
          = defer: true
          = policy: {"tryPreserveOldConfig": true, "conflict": "flinch", "incompatible": "flinch"}
          = state: "installed"
          - debPkg[xserver-xorg-input-synaptics]
        + iniFile[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/touchpad-config-synclient.desktop]
          + file[…]
            = enforcedGroup: "urd"
            = enforcedModes: "a=rx,ug+w"
            = enforcedOwner: "urd"
            = mimeType: "text/plain"
            + file[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart]
              = mimeType: "inode/directory"
              + file[/var/lib/ubborg-usecase-rescuedisk-pmb/.config]
                = mimeType: "inode/directory"
                + file[/var/lib/ubborg-usecase-rescuedisk-pmb]
                  = mimeType: "inode/directory"
                  ^ file[/var/lib]
                  - file[/var/lib/ubborg-usecase-rescuedisk-pmb]
                - file[/var/lib/ubborg-usecase-rescuedisk-pmb/.config]
              - file[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart]
            - file[…]
          + iniFileSect[…|Desktop Entry]
            = exists: true
            = path: "/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/touchpad-config-synclient.desktop"
            = sect: "Desktop Entry"
            - iniFileSect[…|Desktop Entry]
          + iniFileOpt[…|Desktop Entry|Encoding]
            = key: "Encoding"
            = path: "/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/touchpad-config-synclient.desktop"
            = sect: "Desktop Entry"
            = val: "UTF-8"
            ^ iniFileSect[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/touchpad-config-synclient.desktop|Desktop Entry]
            - iniFileOpt[…|Desktop Entry|Encoding]
          + iniFileOpt[…|Desktop Entry|Version]
            = key: "Version"
            = path: "/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/touchpad-config-synclient.desktop"
            = sect: "Desktop Entry"
            = val: "0.9.4"
            ^ iniFileSect[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/touchpad-config-synclient.desktop|Desktop Entry]
            - iniFileOpt[…|Desktop Entry|Version]
          + iniFileOpt[…|Desktop Entry|Type]
            = key: "Type"
            = path: "/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/touchpad-config-synclient.desktop"
            = sect: "Desktop Entry"
            = val: "Application"
            ^ iniFileSect[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/touchpad-config-synclient.desktop|Desktop Entry]
            - iniFileOpt[…|Desktop Entry|Type]
          + iniFileOpt[…|Desktop Entry|Name]
            = key: "Name"
            = path: "/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/touchpad-config-synclient.desktop"
            = sect: "Desktop Entry"
            = val: "Touchpad Config via synclient"
            ^ iniFileSect[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/touchpad-config-synclient.desktop|Desktop Entry]
            - iniFileOpt[…|Desktop Entry|Name]
          + iniFileOpt[…|Desktop Entry|Comment]
            = key: "Comment"
            = path: "/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/touchpad-config-synclient.desktop"
            = sect: "Desktop Entry"
            = val: "Use touchpad only to move the mouse, click only with buttons."
            ^ iniFileSect[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/touchpad-config-synclient.desktop|Desktop Entry]
            - iniFileOpt[…|Desktop Entry|Comment]
          + iniFileOpt[…|Desktop Entry|StartupNotify]
            = key: "StartupNotify"
            = path: "/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/touchpad-config-synclient.desktop"
            = sect: "Desktop Entry"
            = val: false
            ^ iniFileSect[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/touchpad-config-synclient.desktop|Desktop Entry]
            - iniFileOpt[…|Desktop Entry|StartupNotify]
          + iniFileOpt[…|Desktop Entry|Terminal]
            = key: "Terminal"
            = path: "/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/touchpad-config-synclient.desktop"
            = sect: "Desktop Entry"
            = val: false
            ^ iniFileSect[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/touchpad-config-synclient.desktop|Desktop Entry]
            - iniFileOpt[…|Desktop Entry|Terminal]
          + iniFileOpt[…|Desktop Entry|Hidden]
            = key: "Hidden"
            = path: "/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/touchpad-config-synclient.desktop"
            = sect: "Desktop Entry"
            = val: "false"
            ^ iniFileSect[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/touchpad-config-synclient.desktop|Desktop Entry]
            - iniFileOpt[…|Desktop Entry|Hidden]
          - iniFile[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/touchpad-config-synclient.desktop]
        - bundle[…avoidAccidentialTouchpadTap]
      + bundle[…avoidDefaultAptUpdates]
        + iniFile[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/update-notifier.desktop]
          + file[…]
            = enforcedGroup: "urd"
            = enforcedModes: "a=rx,ug+w"
            = enforcedOwner: "urd"
            = mimeType: "text/plain"
            ^ file[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart]
            - file[…]
          + iniFileSect[…|Desktop Entry]
            = exists: true
            = path: "/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/update-notifier.desktop"
            = sect: "Desktop Entry"
            - iniFileSect[…|Desktop Entry]
          + iniFileOpt[…|Desktop Entry|Hidden]
            = key: "Hidden"
            = path: "/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/update-notifier.desktop"
            = sect: "Desktop Entry"
            = val: "true"
            ^ iniFileSect[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/update-notifier.desktop|Desktop Entry]
            - iniFileOpt[…|Desktop Entry|Hidden]
          - iniFile[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/update-notifier.desktop]
        + file[/etc/apt/apt.conf.d/95never-install-recommends]
          = content: ["# This file was generated using ubborg-usecase-rescuedisk-pmb\n",
¬¶            "APT::Install-Recommends \"0\";\n",
¬¶            "APT::Install-Suggests \"0\";\n"]
          = enforcedGroup: "adm"
          = enforcedModes: "a=r,ug+w"
          = enforcedOwner: "root"
          = mimeType: "text/plain"
          = replace: true
          + file[/etc/apt/apt.conf.d]
            = mimeType: "inode/directory"
            ^ file[/etc/apt]
            - file[/etc/apt/apt.conf.d]
          - file[/etc/apt/apt.conf.d/95never-install-recommends]
        + file[/etc/apt/apt.conf.d/95no-periodic-interference]
          = content: ["# This file was generated using ubborg-usecase-rescuedisk-pmb\n",
¬¶            "APT::Periodic::Enable \"0\";\n"]
          = enforcedGroup: "adm"
          = enforcedModes: "a=r,ug+w"
          = enforcedOwner: "root"
          = mimeType: "text/plain"
          = replace: true
          ^ file[/etc/apt/apt.conf.d]
          - file[/etc/apt/apt.conf.d/95no-periodic-interference]
        - bundle[…avoidDefaultAptUpdates]
      + bundle[…presentationMode]
        + file[/var/lib/ubborg-usecase-rescuedisk-pmb/.xscreensaver]
          = content: "# This file was generated using ubborg-usecase-rescuedisk-pmb\nmode: off\nlock: False\n"
          = enforcedGroup: "urd"
          = enforcedModes: "a=r,ug+w"
          = enforcedOwner: "urd"
          = mimeType: "text/plain"
          = replace: true
          ^ file[/var/lib/ubborg-usecase-rescuedisk-pmb]
          - file[/var/lib/ubborg-usecase-rescuedisk-pmb/.xscreensaver]
        + file[/etc/systemd/logind.conf.d/insomnia.conf]
          = content: ["[Login]\n",
¬¶            "HandlePowerKey=ignore\n",
¬¶            "HandleSuspendKey=ignore\n",
¬¶            "HandleHibernateKey=ignore\n",
¬¶            "HandleLidSwitch=ignore\n",
¬¶            "HandleLidSwitchExternalPower=ignore\n",
¬¶            "HandleLidSwitchDocked=ignore\n",
¬¶            "PowerKeyIgnoreInhibited=no\n",
¬¶            "SuspendKeyIgnoreInhibited=no\n",
¬¶            "HibernateKeyIgnoreInhibited=no\n",
¬¶            "LidSwitchIgnoreInhibited=no\n"]
          = enforcedGroup: "adm"
          = enforcedModes: "a=r,ug+w"
          = enforcedOwner: "root"
          = mimeType: "text/plain"
          + file[/etc/systemd/logind.conf.d]
            = mimeType: "inode/directory"
            + file[/etc/systemd]
              = mimeType: "inode/directory"
              ^ file[/etc]
              - file[/etc/systemd]
            - file[/etc/systemd/logind.conf.d]
          - file[/etc/systemd/logind.conf.d/insomnia.conf]
        - bundle[…presentationMode]
      - bundle[…/src/workarounds/]
    - bundle[cjs:ubborg-usecase-rescuedisk-pmb]
  - stage[example_plans/vanilla]

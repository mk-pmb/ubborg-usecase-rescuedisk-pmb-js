+ stage[example_plans/vanilla]
  = deferredDebPkgs: {"installs": […], "modifies": …, "policy": {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}, "removes": […]}
  + sysFacts[osVersion]
    = facts: {"codename": "focal", "distro": "ubuntu", "family": "linux", "release": "20.04"}
    - sysFacts[osVersion]
  + bundle[cjs:ubborg-usecase-rescuedisk-pmb]
    + bundle[…/src/cfg/i18nLocales]
      = param: {}
      + i18nLocale[en_US.UTF-8]
        = present: true
        - i18nLocale[en_US.UTF-8]
      - bundle[…/src/cfg/i18nLocales]
    + bundle[…/src/cfg/primaryKeyboard]
      = param: {}
      + file[/etc/default/keyboard]
        = content: ["# Keyboard config, see man 5 keyboard\n",
¬¶            "XKBMODEL='pc105'\n",
¬¶            "XKBLAYOUT='us'\n",
¬¶            "XKBVARIANT='nodeadkeys'\n",
¬¶            "XKBOPTIONS='caps:none'\n",
¬¶            "BACKSPACE='guess'\n"]
        = mimeType: "text/plain"
        + file[/etc/default]
          = mimeType: "inode/directory"
          + file[/etc]
            = mimeType: "inode/directory"
            - file[/etc]
          - file[/etc/default]
        - file[/etc/default/keyboard]
      - bundle[…/src/cfg/primaryKeyboard]
    + bundle[…/src/user]
      + bundle[cjs:ubborg-usecase-rescuedisk-pmb/src/cfg/lightdmAutologin]
        = param: {"loginName": "urd"}
        + debPkg[lightdm]
          = defer: true
          = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
          = state: "installed"
          - debPkg[lightdm]
        + file[/var/lib/AccountsService/users]
          = enforcedGroup: "adm"
          = enforcedModes: "a-x,a=rX,ug+w"
          = enforcedOwner: "root"
          = mimeType: "inode/directory"
          + file[/var/lib/AccountsService]
            = mimeType: "inode/directory"
            + file[/var/lib]
              = mimeType: "inode/directory"
              + file[/var]
                = mimeType: "inode/directory"
                - file[/var]
              - file[/var/lib]
            - file[/var/lib/AccountsService]
          - file[/var/lib/AccountsService/users]
        + file[/etc/lightdm/user_session_prefs]
          = content: "/var/lib/AccountsService/users"
          = enforcedGroup: "adm"
          = enforcedModes: "a-x,a=rX,ug+w"
          = enforcedOwner: "root"
          = mimeType: "inode/symlink"
          = targetMimeType: "inode/directory"
          + file[/etc/lightdm]
            = mimeType: "inode/directory"
            ^ file[/etc]
            - file[/etc/lightdm]
          ^ file[/var/lib/AccountsService/users]
          - file[/etc/lightdm/user_session_prefs]
        + file[/etc/lightdm/lightdm.conf.d/autologin.conf]
          = content: ["[Seat:*]\n",
¬¶            "autologin-session=lightdm-autologin\n",
¬¶            "autologin-guest=no\n",
¬¶            "autologin-user=urd\n",
¬¶            "autologin-user-timeout=0\n"]
          = enforcedGroup: "adm"
          = enforcedModes: "a-x,a=rX,ug+w"
          = enforcedOwner: "root"
          = mimeType: "text/plain"
          + file[/etc/lightdm/lightdm.conf.d]
            = mimeType: "inode/directory"
            ^ file[/etc/lightdm]
            - file[/etc/lightdm/lightdm.conf.d]
          - file[/etc/lightdm/lightdm.conf.d/autologin.conf]
        - bundle[cjs:ubborg-usecase-rescuedisk-pmb/src/cfg/lightdmAutologin]
      + osUserGroup[urd]
        = exists: true
        = grIdNum: 942
        = interactive: false
        - osUserGroup[urd]
      + osUser[urd]
        = disablePasswordLogin: false
        = exists: true
        = homeDirPath: "/var/lib/ubborg-usecase-rescuedisk-pmb"
        = interactive: true
        = passwordHash: "$6$fake…$==bo…"
        = preserveExistingPasswordHash: false
        = shell: "bash"
        = userIdNum: 942
        + osUserLogin[…]
          = disablePasswordLogin: false
          = exists: true
          = homeDirPath: "/var/lib/ubborg-usecase-rescuedisk-pmb"
          = interactive: true
          = passwordHash: "$6$fake…$==bo…"
          = preserveExistingPasswordHash: false
          = shell: "bash"
          = userIdNum: 942
          - osUserLogin[…]
        + osUserGroupMembership[…|urd]
          = grName: "urd"
          = loginName: "urd"
          = member: true
          ^ osUserLogin[urd]
          ^ osUserGroup[urd]
          - osUserGroupMembership[…|urd]
        + osUserGroupMembership[…|netdev]
          = grName: "netdev"
          = loginName: "urd"
          = member: true
          ^ osUserLogin[urd]
          + osUserGroup[netdev]
            = exists: true
            = interactive: false
            - osUserGroup[netdev]
          - osUserGroupMembership[…|netdev]
        + osUserGroupMembership[…|dialout]
          = grName: "dialout"
          = loginName: "urd"
          = member: true
          ^ osUserLogin[urd]
          + osUserGroup[dialout]
            = exists: true
            = interactive: false
            - osUserGroup[dialout]
          - osUserGroupMembership[…|dialout]
        + osUserGroupMembership[…|fuse]
          = grName: "fuse"
          = loginName: "urd"
          = member: true
          ^ osUserLogin[urd]
          + osUserGroup[fuse]
            = exists: true
            = interactive: false
            - osUserGroup[fuse]
          - osUserGroupMembership[…|fuse]
        + osUserGroupMembership[…|saned]
          = grName: "saned"
          = loginName: "urd"
          = member: true
          ^ osUserLogin[urd]
          + osUserGroup[saned]
            = exists: true
            = interactive: false
            - osUserGroup[saned]
          - osUserGroupMembership[…|saned]
        + osUserGroupMembership[…|lp]
          = grName: "lp"
          = loginName: "urd"
          = member: true
          ^ osUserLogin[urd]
          + osUserGroup[lp]
            = exists: true
            = interactive: false
            - osUserGroup[lp]
          - osUserGroupMembership[…|lp]
        + osUserGroupMembership[…|adm]
          = grName: "adm"
          = loginName: "urd"
          = member: true
          ^ osUserLogin[urd]
          + osUserGroup[adm]
            = exists: true
            = interactive: false
            - osUserGroup[adm]
          - osUserGroupMembership[…|adm]
        + osUserGroupMembership[…|sudo]
          = grName: "sudo"
          = loginName: "urd"
          = member: true
          ^ osUserLogin[urd]
          + osUserGroup[sudo]
            = exists: true
            = interactive: false
            - osUserGroup[sudo]
          - osUserGroupMembership[…|sudo]
        + osUserGroupMembership[…|audio]
          = grName: "audio"
          = loginName: "urd"
          = member: true
          ^ osUserLogin[urd]
          + osUserGroup[audio]
            = exists: true
            = interactive: false
            - osUserGroup[audio]
          - osUserGroupMembership[…|audio]
        + osUserGroupMembership[…|nopasswdlogin]
          = grName: "nopasswdlogin"
          = loginName: "urd"
          = member: true
          ^ osUserLogin[urd]
          + osUserGroup[nopasswdlogin]
            = exists: true
            = interactive: false
            - osUserGroup[nopasswdlogin]
          - osUserGroupMembership[…|nopasswdlogin]
        - osUser[urd]
      + iniFile[/var/lib/AccountsService/users/urd]
        + file[…]
          = mimeType: "text/plain"
          ^ file[/var/lib/AccountsService/users]
          - file[…]
        + iniFileSect[…|User]
          = exists: true
          = path: "/var/lib/AccountsService/users/urd"
          = sect: "User"
          - iniFileSect[…|User]
        + iniFileOpt[…|User|XSession]
          = key: "XSession"
          = path: "/var/lib/AccountsService/users/urd"
          = sect: "User"
          = val: "openbox"
          ^ iniFileSect[/var/lib/AccountsService/users/urd|User]
          - iniFileOpt[…|User|XSession]
        - iniFile[/var/lib/AccountsService/users/urd]
      + file[/var/lib/ubborg-usecase-rescuedisk-pmb]
        = enforcedGroup: "urd"
        = enforcedModes: "a-x,a=rX,ug+w"
        = enforcedOwner: "urd"
        = mimeType: "inode/directory"
        ^ file[/var/lib]
        - file[/var/lib/ubborg-usecase-rescuedisk-pmb]
      + file[/var/lib/ubborg-usecase-rescuedisk-pmb/Desktop]
        = enforcedGroup: "urd"
        = enforcedModes: "a-x,a=rX,ug+w"
        = enforcedOwner: "urd"
        = mimeType: "inode/directory"
        ^ file[/var/lib/ubborg-usecase-rescuedisk-pmb]
        - file[/var/lib/ubborg-usecase-rescuedisk-pmb/Desktop]
      + file[/var/lib/ubborg-usecase-rescuedisk-pmb/.config]
        = enforcedGroup: "urd"
        = enforcedModes: "a-x,a=rX,ug+w"
        = enforcedOwner: "urd"
        = mimeType: "inode/directory"
        ^ file[/var/lib/ubborg-usecase-rescuedisk-pmb]
        - file[/var/lib/ubborg-usecase-rescuedisk-pmb/.config]
      + file[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/ssh]
        = enforcedGroup: "urd"
        = enforcedModes: "a-x,a=rX,ug+w"
        = enforcedOwner: "urd"
        = mimeType: "inode/directory"
        ^ file[/var/lib/ubborg-usecase-rescuedisk-pmb/.config]
        - file[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/ssh]
      ^ file[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/ssh]
      + file[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart]
        = enforcedGroup: "urd"
        = enforcedModes: "a-x,a=rX,ug+w"
        = enforcedOwner: "urd"
        = mimeType: "inode/directory"
        ^ file[/var/lib/ubborg-usecase-rescuedisk-pmb/.config]
        - file[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart]
      + file[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/user-dirs.locale]
        = content: "C\n"
        = enforcedGroup: "urd"
        = enforcedModes: "a-x,a=rX,ug+w"
        = enforcedOwner: "urd"
        = mimeType: "text/plain"
        ^ file[/var/lib/ubborg-usecase-rescuedisk-pmb/.config]
        - file[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/user-dirs.locale]
      + file[/var/lib/ubborg-usecase-rescuedisk-pmb/.xscreensaver]
        = content: "# This file was generated using ubborg-usecase-rescuedisk-pmb\nmode: off\nlock: False\n"
        = enforcedGroup: "urd"
        = enforcedModes: "a-x,a=rX,ug+w"
        = enforcedOwner: "urd"
        = mimeType: "text/plain"
        ^ file[/var/lib/ubborg-usecase-rescuedisk-pmb]
        - file[/var/lib/ubborg-usecase-rescuedisk-pmb/.xscreensaver]
      + file[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/desktop_bgcolor.desktop]
        = content: ["[Desktop Entry]\n",
¬¶            "Encoding=UTF-8\n",
¬¶            "Version=0.9.4\n",
¬¶            "Type=Application\n",
¬¶            "Name=Set desktop background color\n",
¬¶            "Comment=\n",
¬¶            "Icon=\n",
¬¶            "Exec=xsetroot -solid darkslateblue\n",
¬¶            "StartupNotify=no\n",
¬¶            "Terminal=no\n",
¬¶            "Hidden=false\n"]
        = enforcedGroup: "urd"
        = enforcedModes: "a=rx,ug+w"
        = enforcedOwner: "urd"
        = mimeType: "text/plain"
        ^ file[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart]
        - file[/var/lib/ubborg-usecase-rescuedisk-pmb/.config/autostart/desktop_bgcolor.desktop]
      + file[/var/lib/ubborg-usecase-rescuedisk-pmb/.gitconfig]
        = content: ["[user]\n",
¬¶            "\tname = User Name\n",
¬¶            "\temail = user@host.tld\n",
¬¶            "\n",
¬¶            "[color]\n",
¬¶            "\tui = auto\n",
¬¶            "\n",
¬¶            "[color \"status\"]\n",
¬¶            "\tupdated = bold yellow\n",
¬¶            "\tchanged = bold red\n",
¬¶            "\tuntracked = cyan\n",
¬¶            "\n",
¬¶            "[merge]\n",
¬¶            "\tff = only\n",
¬¶            "\n",
¬¶            "[receive]\n",
¬¶            "\tdenyDeletes = true\n",
¬¶            "\tdenyNonFastForwards = true\n",
¬¶            "\n",
¬¶            "[push]\n",
¬¶            "\tdefault = matching\n",
¬¶            "\n",
¬¶            "[annex]\n",
¬¶            "\tbackends = SHA256E SHA512E\n",
¬¶            "\n",
¬¶            "[alias]\n",
¬¶            "\tchp = cherry-pick\n",
¬¶            "\trmt = remote\n",
¬¶            "\tusi = update-server-info\n"]
        = enforcedGroup: "urd"
        = enforcedModes: "a-x,a=rX,ug+w"
        = enforcedOwner: "urd"
        = mimeType: "text/plain"
        ^ file[/var/lib/ubborg-usecase-rescuedisk-pmb]
        - file[/var/lib/ubborg-usecase-rescuedisk-pmb/.gitconfig]
      - bundle[…/src/user]
    + bundle[…/src/workarounds/]
      + bundle[…allowMagicSysRq]
        + file[/etc/sysctl.d/90-allow-magic-sysrq.conf]
          = content: ["# -*- coding: utf-8, tab-width: 2 -*-\n",
¬¶            "#\n",
¬¶            "# Security concerns described here:\n",
¬¶            "# https://bugs.launchpad.net/ubuntu/+source/linux/+bug/194676\n",
¬¶            "# However, session-killing and OOM kill can be really handy at times.\n",
¬¶            "#\n",
¬¶            "# German keyboards: https://de.wikipedia.org/wiki/Magische_S-Abf-Taste\n",
¬¶            "# \"Auf Tastaturen für Deutschland drückt man […] Alt + Druck + Taste […]\"\n",
¬¶            "\n",
¬¶            "kernel.sysrq = 1\n"]
          = enforcedGroup: "adm"
          = enforcedModes: "a-x,a=rX,ug+w"
          = enforcedOwner: "root"
          = mimeType: "text/plain; charset=UTF-8"
          + file[/etc/sysctl.d]
            = mimeType: "inode/directory"
            ^ file[/etc]
            - file[/etc/sysctl.d]
          - file[/etc/sysctl.d/90-allow-magic-sysrq.conf]
        - bundle[…allowMagicSysRq]
      + bundle[…anacronEvenOnBattery]
        + file[/etc/systemd/system/anacron.service.d/on-ac.conf]
          = content: ["[Unit]\n", "ConditionACPower=\n"]
          = enforcedGroup: "adm"
          = enforcedModes: "a-x,a=rX,ug+w"
          = enforcedOwner: "root"
          = mimeType: "text/plain"
          + file[/etc/systemd/system/anacron.service.d]
            = mimeType: "inode/directory"
            + file[/etc/systemd/system]
              = mimeType: "inode/directory"
              + file[/etc/systemd]
                = mimeType: "inode/directory"
                ^ file[/etc]
                - file[/etc/systemd]
              - file[/etc/systemd/system]
            - file[/etc/systemd/system/anacron.service.d]
          - file[/etc/systemd/system/anacron.service.d/on-ac.conf]
        - bundle[…anacronEvenOnBattery]
      + bundle[…aptAskQuestionsEarly]
        + file[/etc/apt/apt.conf.d/40interview-first]
          = content: ["# -*- coding: utf-8, tab-width: 2 -*-\n",
¬¶            "\n",
¬¶            "# Make apt/dpkg try to ask all config questions up front,\n",
¬¶            "# so that once the update starts, it _should_ be able to\n",
¬¶            "# finish without any further interaction.\n",
¬¶            "\n",
¬¶            "DPkg::Pre-Install-Pkgs {\n",
¬¶            "  \"dpkg-preconfigure --apt --priority=high\";\n",
¬¶            "};\n"]
          = enforcedGroup: "adm"
          = enforcedModes: "a-x,a=rX,ug+w"
          = enforcedOwner: "root"
          = mimeType: "text/plain; charset=UTF-8"
          + file[/etc/apt/apt.conf.d]
            = mimeType: "inode/directory"
            + file[/etc/apt]
              = mimeType: "inode/directory"
              ^ file[/etc]
              - file[/etc/apt]
            - file[/etc/apt/apt.conf.d]
          - file[/etc/apt/apt.conf.d/40interview-first]
        - bundle[…aptAskQuestionsEarly]
      + bundle[…aptAvoidDefaultUpdates]
        + file[/etc/xdg/autostart/update-notifier.desktop]
          = content: ["[Desktop Entry]\n", "Hidden=true\n"]
          = enforcedModes: "a=rx,ug+w"
          = mimeType: "text/plain"
          + file[/etc/xdg/autostart]
            = mimeType: "inode/directory"
            + file[/etc/xdg]
              = mimeType: "inode/directory"
              ^ file[/etc]
              - file[/etc/xdg]
            - file[/etc/xdg/autostart]
          - file[/etc/xdg/autostart/update-notifier.desktop]
        + file[/etc/apt/apt.conf.d/95never-install-recommends]
          = content: ["# This file was generated using ubborg-usecase-rescuedisk-pmb\n",
¬¶            "APT::Install-Recommends \"0\";\n",
¬¶            "APT::Install-Suggests \"0\";\n"]
          = enforcedGroup: "adm"
          = enforcedModes: "a-x,a=rX,ug+w"
          = enforcedOwner: "root"
          = mimeType: "text/plain"
          = replace: true
          ^ file[/etc/apt/apt.conf.d]
          - file[/etc/apt/apt.conf.d/95never-install-recommends]
        + file[/etc/apt/apt.conf.d/95no-periodic-interference]
          = content: ["# This file was generated using ubborg-usecase-rescuedisk-pmb\n",
¬¶            "APT::Periodic::Enable \"0\";\n",
¬¶            "# Because it usually blocks the apt database at exactly",
¬¶            "# the moment you want to install something."]
          = enforcedGroup: "adm"
          = enforcedModes: "a-x,a=rX,ug+w"
          = enforcedOwner: "root"
          = mimeType: "text/plain"
          = replace: true
          ^ file[/etc/apt/apt.conf.d]
          - file[/etc/apt/apt.conf.d/95no-periodic-interference]
        - bundle[…aptAvoidDefaultUpdates]
      + bundle[…aptImpatientHttp]
        + file[/etc/apt/apt.conf.d/40impatient-http]
          = content: ["# -*- coding: utf-8, tab-width: 2 -*-\n",
¬¶            "\n",
¬¶            "# Waste less time on dead mirror servers.\n",
¬¶            "\n",
¬¶            "Acquire::http::Retries \"1\";\n",
¬¶            "Acquire::http::timeout \"10\";\n"]
          = enforcedGroup: "adm"
          = enforcedModes: "a-x,a=rX,ug+w"
          = enforcedOwner: "root"
          = mimeType: "text/plain; charset=UTF-8"
          ^ file[/etc/apt/apt.conf.d]
          - file[/etc/apt/apt.conf.d/40impatient-http]
        - bundle[…aptImpatientHttp]
      + bundle[…aptUpdateSegfault]
        + file[/etc/apt/apt.conf.d/90cache-limit-avoid-segfault]
          = content: ["# -*- coding: utf-8, tab-width: 2 -*-\n",
¬¶            "\n",
¬¶            "# increase apt's cache limit to avoid \"apt-get update\" segfaulting\n",
¬¶            "# while reading package lists.\n",
¬¶            "# see LANG=C man 5 apt.conf | grep Cache-Start, -A 15\n",
¬¶            "\n",
¬¶            "# unit = bytes.    ,m ,k ,b\n",
¬¶            "APT::Cache-Start  32000000;\n",
¬¶            "APT::Cache-Grow    2000000;\n",
¬¶            "APT::Cache-Limit 128000000;\n"]
          = enforcedGroup: "adm"
          = enforcedModes: "a-x,a=rX,ug+w"
          = enforcedOwner: "root"
          = mimeType: "text/plain; charset=UTF-8"
          ^ file[/etc/apt/apt.conf.d]
          - file[/etc/apt/apt.conf.d/90cache-limit-avoid-segfault]
        - bundle[…aptUpdateSegfault]
      + bundle[…avoidAccidentialTouchpadTap]
        + debPkg[xserver-xorg-input-synaptics]
          = defer: true
          = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
          = state: "installed"
          - debPkg[xserver-xorg-input-synaptics]
        + file[/etc/xdg/autostart/touchpad-config-synclient.desktop]
          = content: ["[Desktop Entry]\n",
¬¶            "Encoding=UTF-8\n",
¬¶            "Version=0.9.4\n",
¬¶            "Type=Application\n",
¬¶            "Name=Touchpad Config via synclient\n",
¬¶            "Comment=Use touchpad only to move the mouse, click only with buttons.\n",
¬¶            "Icon=input-touchpad\n",
¬¶            "Exec=/usr/bin/synclient MaxTapTime=0 MaxDoubleTapTime=0 VertEdgeScroll=0\n",
¬¶            "StartupNotify=no\n",
¬¶            "Terminal=no\n",
¬¶            "Hidden=false\n"]
          = enforcedModes: "a=rx,ug+w"
          = mimeType: "text/plain"
          ^ file[/etc/xdg/autostart]
          - file[/etc/xdg/autostart/touchpad-config-synclient.desktop]
        - bundle[…avoidAccidentialTouchpadTap]
      + bundle[…disableUbuntuStartupSound]
        + debPkg[ubuntu-sounds]
          = defer: true
          = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
          = state: "absent"
          - debPkg[ubuntu-sounds]
        - bundle[…disableUbuntuStartupSound]
      + bundle[…insomnia]
        + file[/etc/systemd/logind.conf.d/insomnia.conf]
          = content: ["[Login]\n",
¬¶            "HandlePowerKey=ignore\n",
¬¶            "HandleSuspendKey=ignore\n",
¬¶            "HandleHibernateKey=ignore\n",
¬¶            "HandleLidSwitch=ignore\n",
¬¶            "HandleLidSwitchExternalPower=ignore\n",
¬¶            "HandleLidSwitchDocked=ignore\n",
¬¶            "PowerKeyIgnoreInhibited=no\n",
¬¶            "SuspendKeyIgnoreInhibited=no\n",
¬¶            "HibernateKeyIgnoreInhibited=no\n",
¬¶            "LidSwitchIgnoreInhibited=no\n"]
          = enforcedGroup: "adm"
          = enforcedModes: "a-x,a=rX,ug+w"
          = enforcedOwner: "root"
          = mimeType: "text/plain"
          + file[/etc/systemd/logind.conf.d]
            = mimeType: "inode/directory"
            ^ file[/etc/systemd]
            - file[/etc/systemd/logind.conf.d]
          - file[/etc/systemd/logind.conf.d/insomnia.conf]
        - bundle[…insomnia]
      + bundle[…pulseAudioOnlyForGroupAudio]
        + file[/etc/systemd/user/pulseaudio.service.d/audio_group_only.conf]
          = content: ["# This file was generated using ubborg-usecase-rescuedisk-pmb\n\n",
¬¶            "[Unit]\n",
¬¶            "ConditionGroup=audio\n"]
          = enforcedGroup: "adm"
          = enforcedModes: "a-x,a=rX,ug+w"
          = enforcedOwner: "root"
          = mimeType: "text/plain; charset=UTF-8"
          + file[/etc/systemd/user/pulseaudio.service.d]
            = mimeType: "inode/directory"
            + file[/etc/systemd/user]
              = mimeType: "inode/directory"
              ^ file[/etc/systemd]
              - file[/etc/systemd/user]
            - file[/etc/systemd/user/pulseaudio.service.d]
          - file[/etc/systemd/user/pulseaudio.service.d/audio_group_only.conf]
        + file[/etc/systemd/user/pulseaudio.socket.d/audio_group_only.conf]
          = content: ["# This file was generated using ubborg-usecase-rescuedisk-pmb\n\n",
¬¶            "[Unit]\n",
¬¶            "ConditionGroup=audio\n"]
          = enforcedGroup: "adm"
          = enforcedModes: "a-x,a=rX,ug+w"
          = enforcedOwner: "root"
          = mimeType: "text/plain; charset=UTF-8"
          + file[/etc/systemd/user/pulseaudio.socket.d]
            = mimeType: "inode/directory"
            ^ file[/etc/systemd/user]
            - file[/etc/systemd/user/pulseaudio.socket.d]
          - file[/etc/systemd/user/pulseaudio.socket.d/audio_group_only.conf]
        - bundle[…pulseAudioOnlyForGroupAudio]
      + bundle[…systemdFixesForFocal]
        + file[/lib/systemd/system/dbus.socket.d/modernize_for_ubuntu_focal.conf]
          = content: ["[Socket]\n", "ListenStream=\n", "ListenStream=/run/dbus/system_bus_socket\n"]
          = enforcedGroup: "adm"
          = enforcedModes: "a-x,a=rX,ug+w"
          = enforcedOwner: "root"
          = mimeType: "text/plain"
          + file[/lib/systemd/system/dbus.socket.d]
            = mimeType: "inode/directory"
            + file[/lib/systemd/system]
              = mimeType: "inode/directory"
              + file[/lib/systemd]
                = mimeType: "inode/directory"
                + file[/lib]
                  = mimeType: "inode/directory"
                  - file[/lib]
                - file[/lib/systemd]
              - file[/lib/systemd/system]
            - file[/lib/systemd/system/dbus.socket.d]
          - file[/lib/systemd/system/dbus.socket.d/modernize_for_ubuntu_focal.conf]
        - bundle[…systemdFixesForFocal]
      + bundle[…systemdQuickShutdown]
        + file[/etc/systemd/system.conf.d/quick_shutdown.conf]
          = content: ["[Manager]\n", "DefaultTimeoutStopSec=30\n"]
          = enforcedGroup: "adm"
          = enforcedModes: "a-x,a=rX,ug+w"
          = enforcedOwner: "root"
          = mimeType: "text/plain"
          + file[/etc/systemd/system.conf.d]
            = mimeType: "inode/directory"
            ^ file[/etc/systemd]
            - file[/etc/systemd/system.conf.d]
          - file[/etc/systemd/system.conf.d/quick_shutdown.conf]
        - bundle[…systemdQuickShutdown]
      + bundle[…ubuntuVersionSpecific]
        ^ sysFacts[osVersion]
        + bundle[cjs:ubborg-usecase-rescuedisk-pmb/src/workarounds/focal/]
          + bundle[…pavucontrolMultiInstance]
            + file[/usr/local/bin/pavucontrol]
              = content: ["#!/bin/sh\n",
¬¶            "export DBUS_SESSION_BUS_ADDRESS=; exec /usr/bin/pavucontrol \"$@\"; exit $?\n",
¬¶            "#\n",
¬¶            "# Workaround: Allow multiple instances even with pavucontrol 4.0-1build1\n",
¬¶            "# from Ubuntu 20.04.2 LTS focal official repos.\n",
¬¶            "#\n",
¬¶            "# Installed via cjs:ubborg-usecase-rescuedisk-pmb/src/workarounds/focal/pavucontrolMultiInstance\n"]
              = enforcedModes: "a=rx"
              = mimeType: "text/plain; charset=UTF-8"
              + file[/usr/local/bin]
                = mimeType: "inode/directory"
                + file[/usr/local]
                  = mimeType: "inode/directory"
                  + file[/usr]
                    = mimeType: "inode/directory"
                    - file[/usr]
                  - file[/usr/local]
                - file[/usr/local/bin]
              - file[/usr/local/bin/pavucontrol]
            - bundle[…pavucontrolMultiInstance]
          - bundle[cjs:ubborg-usecase-rescuedisk-pmb/src/workarounds/focal/]
        - bundle[…ubuntuVersionSpecific]
      + bundle[…wifiAvoidPowersave]
        + file[/etc/modprobe.d/wifi-avoid-powersave-urd.conf]
          = content: ["# This file was generated using ubborg-usecase-rescuedisk-pmb\n\n",
¬¶            "options 8188eu rtw_power_mgnt=0 rtw_enusbss=0\n",
¬¶            "options 8723bs rtw_power_mgnt=0 rtw_enusbss=0\n"]
          = enforcedGroup: "adm"
          = enforcedModes: "a-x,a=rX,ug+w"
          = enforcedOwner: "root"
          = mimeType: "text/plain; charset=UTF-8"
          + file[/etc/modprobe.d]
            = mimeType: "inode/directory"
            ^ file[/etc]
            - file[/etc/modprobe.d]
          - file[/etc/modprobe.d/wifi-avoid-powersave-urd.conf]
        - bundle[…wifiAvoidPowersave]
      + bundle[…xorgDisableBogusDefaultPointer]
        + file[/usr/share/X11/xorg.conf.d/20-workaround-focal-ignore-default-pointer.conf]
          = content: ["# This file was generated using ubborg-planner-pmb\n",
¬¶            "\n",
¬¶            "Section \"InputClass\"\n",
¬¶            "  Identifier \"Annoying doppelganger of real, more specific touchpads\"\n",
¬¶            "  MatchProduct \"<default pointer>\"\n",
¬¶            "  # MatchIsPointer \"yes\"\n",
¬¶            "  # MatchIsTouchoad \"yes\"\n",
¬¶            "  Option \"Ignore\" \"yes\"\n",
¬¶            "EndSection\n"]
          = enforcedGroup: "adm"
          = enforcedModes: "a-x,a=rX,ug+w"
          = enforcedOwner: "root"
          = mimeType: "text/plain; charset=UTF-8"
          + file[/usr/share/X11/xorg.conf.d]
            = mimeType: "inode/directory"
            + file[/usr/share/X11]
              = mimeType: "inode/directory"
              + file[/usr/share]
                = mimeType: "inode/directory"
                ^ file[/usr]
                - file[/usr/share]
              - file[/usr/share/X11]
            - file[/usr/share/X11/xorg.conf.d]
          - file[/usr/share/X11/xorg.conf.d/20-workaround-focal-ignore-default-pointer.conf]
        - bundle[…xorgDisableBogusDefaultPointer]
      + bundle[…xorgSynapticsShmConfig]
        + file[/usr/share/X11/xorg.conf.d/20-synaptics-enable-shmconfig.conf]
          = content: ["# This file was generated using ubborg-planner-pmb\n",
¬¶            "\n",
¬¶            "Section \"InputClass\"\n",
¬¶            "  Identifier \"Enable Synaptics SHMConfig\n",
¬¶            "  MatchIsTouchpad \"on\"\n",
¬¶            "  MatchDevicePath \"/dev/input/event*\"\n",
¬¶            "  Option \"SHMConfig\" \"on\"\n",
¬¶            "EndSection\n"]
          = enforcedGroup: "adm"
          = enforcedModes: "a-x,a=rX,ug+w"
          = enforcedOwner: "root"
          = mimeType: "text/plain; charset=UTF-8"
          ^ file[/usr/share/X11/xorg.conf.d]
          - file[/usr/share/X11/xorg.conf.d/20-synaptics-enable-shmconfig.conf]
        - bundle[…xorgSynapticsShmConfig]
      + bundle[…xorgUseEvdevRules]
        + file[/usr/share/X11/xorg.conf.d/20-workaround-focal-xkb-use-evdev-rules.conf]
          = content: ["# This file was generated using ubborg-planner-pmb\n",
¬¶            "\n",
¬¶            "Section \"InputClass\"\n",
¬¶            "  Identifier \"Enable evdev rules even on Ubuntu focal\"\n",
¬¶            "  MatchIsKeyboard \"yes\"\n",
¬¶            "  MatchDevicePath \"/dev/input/event*\"\n",
¬¶            "  Option \"XkbRules\" \"evdev\"\n",
¬¶            "EndSection\n"]
          = enforcedGroup: "adm"
          = enforcedModes: "a-x,a=rX,ug+w"
          = enforcedOwner: "root"
          = mimeType: "text/plain; charset=UTF-8"
          ^ file[/usr/share/X11/xorg.conf.d]
          - file[/usr/share/X11/xorg.conf.d/20-workaround-focal-xkb-use-evdev-rules.conf]
        - bundle[…xorgUseEvdevRules]
      - bundle[…/src/workarounds/]
    + bundle[…/src/software/debPkg/__stage__]
      + stage[cjs:ubborg-usecase-rescuedisk-pmb/src/software/debPkg/]
        = deferredDebPkgs: {"installs": […], "modifies": …, "policy": {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}, "removes": […], "updatePkgLists": true}
        + bundle[…ansibleAux]
          + debPkg[acl]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = presenceMarker: "cmd:setfacl"
            = state: "installed"
            - debPkg[acl]
          - bundle[…ansibleAux]
        + bundle[…basicImageEditing]
          + debPkg[mtpaint]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[mtpaint]
          + debPkg[imagemagick]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[imagemagick]
          - bundle[…basicImageEditing]
        + bundle[…configMgmt]
          + debPkg[crudini]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[crudini]
          + debPkg[ansible]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[ansible]
          - bundle[…configMgmt]
        + bundle[…cryptoAndRandomness]
          + debPkg[ent]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[ent]
          + debPkg[haveged]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[haveged]
          + debPkg[libcrypt-ssleay-perl]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[libcrypt-ssleay-perl]
          + debPkg[libnet-ssleay-perl]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[libnet-ssleay-perl]
          - bundle[…cryptoAndRandomness]
        + bundle[…dataRecovery]
          + debPkg[gddrescue]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[gddrescue]
          - bundle[…dataRecovery]
        + bundle[…debPkgLists_ubuntuDefault]
          ^ sysFacts[osVersion]
          + debPkgRepo[ubuntu_security]
            = archs: null
            = components: ["main", "restricted", "universe", "multiverse"]
            = debUrls: ["http://security.ubuntu.com/ubuntu"]
            = deferPkgListUpdate: true
            = dists: ["%{codename}-security"]
            = keyUrls: null
            = src: true
            = state: "enabled"
            ^ sysFacts[osVersion]
            + file[/etc/apt/sources.list.d/ubborg.ubuntu_security.list]
              = content: ["# This file was generated using ubborg-planner-pmb\n",
¬¶            "deb     http://security.ubuntu.com/ubuntu focal-security main restricted universe multiverse\n",
¬¶            "deb-src http://security.ubuntu.com/ubuntu focal-security main restricted universe multiverse\n"]
              = enforcedGroup: "adm"
              = enforcedModes: "a-x,a=rX,ug+w"
              = enforcedOwner: "root"
              = mimeType: "text/plain"
              + file[/etc/apt/sources.list.d]
                = mimeType: "inode/directory"
                ^ file[/etc/apt]
                - file[/etc/apt/sources.list.d]
              - file[/etc/apt/sources.list.d/ubborg.ubuntu_security.list]
            - debPkgRepo[ubuntu_security]
          + debPkgRepo[ubuntu_base]
            = archs: null
            = components: ["main", "restricted", "universe", "multiverse"]
            = debUrls: ["http://de.archive.ubuntu.com/ubuntu"]
            = deferPkgListUpdate: true
            = dists: ["%{codename}", "%{codename}-backports", "%{codename}-updates", "%{codename}-proposed"]
            = keyUrls: null
            = src: true
            = state: "enabled"
            ^ sysFacts[osVersion]
            + file[/etc/apt/sources.list.d/ubborg.ubuntu_base.list]
              = content: ["# This file was generated using ubborg-planner-pmb\n",
¬¶            "deb     http://de.archive.ubuntu.com/ubuntu focal main restricted universe multiverse\n",
¬¶            "deb-src http://de.archive.ubuntu.com/ubuntu focal main restricted universe multiverse\n",
¬¶            "deb     http://de.archive.ubuntu.com/ubuntu focal-backports main restricted universe multiverse\n",
¬¶            "deb-src http://de.archive.ubuntu.com/ubuntu focal-backports main restricted universe multiverse\n",
¬¶            "deb     http://de.archive.ubuntu.com/ubuntu focal-updates main restricted universe multiverse\n",
¬¶            "deb-src http://de.archive.ubuntu.com/ubuntu focal-updates main restricted universe multiverse\n",
¬¶            "deb     http://de.archive.ubuntu.com/ubuntu focal-proposed main restricted universe multiverse\n",
¬¶            "deb-src http://de.archive.ubuntu.com/ubuntu focal-proposed main restricted universe multiverse\n"]
              = enforcedGroup: "adm"
              = enforcedModes: "a-x,a=rX,ug+w"
              = enforcedOwner: "root"
              = mimeType: "text/plain"
              ^ file[/etc/apt/sources.list.d]
              - file[/etc/apt/sources.list.d/ubborg.ubuntu_base.list]
            - debPkgRepo[ubuntu_base]
          - bundle[…debPkgLists_ubuntuDefault]
        + bundle[…debPkgUtil]
          + debPkg[apt]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[apt]
          + debPkg[aptitude]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[aptitude]
          - bundle[…debPkgUtil]
        + bundle[…debugUtil]
          + debPkg[libc-dev-bin]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = presenceMarker: "cmd:mtrace"
            = state: "installed"
            - debPkg[libc-dev-bin]
          + debPkg[ltrace]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[ltrace]
          + debPkg[strace]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[strace]
          + debPkg[acpi]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[acpi]
          + debPkg[cpuid]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[cpuid]
          + debPkg[debconf-utils]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[debconf-utils]
          + debPkg[hddtemp]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[hddtemp]
          + debPkg[htop]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[htop]
          + debPkg[iotop]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[iotop]
          + debPkg[lshw]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[lshw]
          + debPkg[lsof]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[lsof]
          + debPkg[mmc-utils]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[mmc-utils]
          + debPkg[powertop]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[powertop]
          + debPkg[units]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[units]
          + debPkg[usbutils]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[usbutils]
          - bundle[…debugUtil]
        + bundle[…develBasics]
          + debPkg[build-essential]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[build-essential]
          - bundle[…develBasics]
        + bundle[…dialogScripting]
          + debPkg[gxmessage]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[gxmessage]
          + debPkg[x11-utils]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[x11-utils]
          + debPkg[zenity]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[zenity]
          + debPkg[yad]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[yad]
          + debPkg[alltray]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[alltray]
          - bundle[…dialogScripting]
        + bundle[…diskPartMgmt]
          + debPkg[hdparm]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[hdparm]
          + debPkg[util-linux]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[util-linux]
          + debPkg[gparted]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[gparted]
          + debPkg[gpart]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[gpart]
          + debPkg[dosfstools]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[dosfstools]
          + debPkg[mtools]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[mtools]
          + debPkg[lvm2]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[lvm2]
          + debPkg[cryptsetup]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[cryptsetup]
          + debPkg[cryptsetup-initramfs]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[cryptsetup-initramfs]
          + debPkg[dmsetup]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[dmsetup]
          + file[/PL]
            = content: "dev/disk/by-partlabel"
            = mimeType: "inode/symlink"
            - file[/PL]
          - bundle[…diskPartMgmt]
        + bundle[…diskSmart]
          + debPkg[smartmontools]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[smartmontools]
          + debPkg[nullmailer]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[nullmailer]
          - bundle[…diskSmart]
        + bundle[…fileCmp]
          + debPkg[colordiff]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[colordiff]
          + debPkg[meld]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[meld]
          - bundle[…fileCmp]
        + bundle[…fileEncodings]
          + debPkg[file]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[file]
          + debPkg[sharutils]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[sharutils]
          + debPkg[par2]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[par2]
          + debPkg[dos2unix]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[dos2unix]
          + debPkg[archivemount]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[archivemount]
          + debPkg[p7zip-full]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[p7zip-full]
          + debPkg[plzip]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[plzip]
          + debPkg[rar]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[rar]
          + debPkg[lhasa]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[lhasa]
          + debPkg[liblz4-tool]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[liblz4-tool]
          + debPkg[lunzip]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[lunzip]
          + debPkg[lzip]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[lzip]
          + debPkg[lziprecover]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[lziprecover]
          + debPkg[lzma]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[lzma]
          + debPkg[zip]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[zip]
          + debPkg[unzip]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[unzip]
          + debPkg[fuse-zip]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[fuse-zip]
          - bundle[…fileEncodings]
        + bundle[…fileSystems]
          + debPkg[extundelete]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[extundelete]
          + debPkg[udisks2]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[udisks2]
          + debPkg[udiskie]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[udiskie]
          + debPkg[gvfs-bin]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[gvfs-bin]
          + debPkg[gvfs-fuse]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[gvfs-fuse]
          + debPkg[exfat-fuse]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[exfat-fuse]
          + debPkg[exfat-utils]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[exfat-utils]
          + debPkg[fatattr]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[fatattr]
          + debPkg[fatresize]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[fatresize]
          + debPkg[ntfs-3g]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[ntfs-3g]
          + debPkg[hfsplus]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[hfsplus]
          + debPkg[hfsprogs]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[hfsprogs]
          + debPkg[hfsutils]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[hfsutils]
          + debPkg[hfsutils-tcltk]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[hfsutils-tcltk]
          - bundle[…fileSystems]
        + bundle[…fileViewers]
          + debPkg[eog]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[eog]
          + debPkg[gpicview]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[gpicview]
          + debPkg[evince]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[evince]
          + debPkg[okular]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[okular]
          - bundle[…fileViewers]
        + bundle[…grub]
          + debPkg[grub2-common]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[grub2-common]
          + debPkg[grub-efi-amd64-bin]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[grub-efi-amd64-bin]
          + debPkg[grub-efi-ia32-bin]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[grub-efi-ia32-bin]
          + debPkg[grub-pc-bin]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[grub-pc-bin]
          - bundle[…grub]
        + bundle[…hexEditors]
          + debPkg[ghex]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[ghex]
          + debPkg[wxhexeditor]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[wxhexeditor]
          - bundle[…hexEditors]
        + bundle[…iconsGnomeDefault]
          + debPkg[gnome-icon-theme]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[gnome-icon-theme]
          + debPkg[gnome-icon-theme-suede]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[gnome-icon-theme-suede]
          + debPkg[adwaita-icon-theme-full]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[adwaita-icon-theme-full]
          - bundle[…iconsGnomeDefault]
        + bundle[…kernel]
          + debPkg[linux-image-lowlatency]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[linux-image-lowlatency]
          - bundle[…kernel]
        + bundle[…math]
          + debPkg[bc]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[bc]
          + debPkg[gnumeric]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[gnumeric]
          + debPkg[wxmaxima]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[wxmaxima]
          - bundle[…math]
        + bundle[…netBasics]
          + debPkg[avahi-daemon]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[avahi-daemon]
          + debPkg[avahi-discover]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[avahi-discover]
          + debPkg[avahi-utils]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[avahi-utils]
          + debPkg[python-avahi]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[python-avahi]
          + debPkg[ifupdown]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[ifupdown]
          + debPkg[libnss-mdns]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[libnss-mdns]
          + debPkg[libnss-myhostname]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[libnss-myhostname]
          + debPkg[net-tools]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = presenceMarker: "cmd:ifconfig"
            = state: "installed"
            - debPkg[net-tools]
          + debPkg[networkd-dispatcher]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[networkd-dispatcher]
          + debPkg[syslinux-utils]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = presenceMarker: "cmd:gethostip"
            = state: "installed"
            - debPkg[syslinux-utils]
          + debPkg[iw]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[iw]
          + debPkg[wireless-tools]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = presenceMarker: "cmd:iwlist"
            = state: "installed"
            - debPkg[wireless-tools]
          + debPkg[rfkill]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[rfkill]
          - bundle[…netBasics]
        + bundle[…netDataTransfer]
          + debPkg[axel]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[axel]
          + debPkg[curl]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[curl]
          + debPkg[netcat]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[netcat]
          + debPkg[socat]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[socat]
          + debPkg[wget]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[wget]
          + debPkg[sshfs]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[sshfs]
          + debPkg[corkscrew]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[corkscrew]
          + debPkg[proxytunnel]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[proxytunnel]
          - bundle[…netDataTransfer]
        + bundle[…netDebug]
          + debPkg[arping]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[arping]
          + debPkg[bind9-dnsutils]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = presenceMarker: "dig"
            = state: "installed"
            - debPkg[bind9-dnsutils]
          + debPkg[iputils-ping]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = presenceMarker: "cmd:ping"
            = state: "installed"
            - debPkg[iputils-ping]
          + debPkg[netsed]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[netsed]
          - bundle[…netDebug]
        + bundle[…netMgr]
          + debPkg[network-manager]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[network-manager]
          + file[/etc/NetworkManager/conf.d/override-wifi-powersave.conf]
            = content: ["[connection]\n",
¬¶            "wifi.powersave = 2\n",
¬¶            "# 2 = disabled; for other values: man nm-settings\n",
¬¶            "# Check with: sudo iw dev wlp2s0 get power_save\n"]
            = enforcedGroup: "adm"
            = enforcedModes: "a-x,a=rX,ug+w"
            = enforcedOwner: "root"
            = mimeType: "text/plain; charset=UTF-8"
            + file[/etc/NetworkManager/conf.d]
              = mimeType: "inode/directory"
              + file[/etc/NetworkManager]
                = mimeType: "inode/directory"
                ^ file[/etc]
                - file[/etc/NetworkManager]
              - file[/etc/NetworkManager/conf.d]
            - file[/etc/NetworkManager/conf.d/override-wifi-powersave.conf]
          - bundle[…netMgr]
        + bundle[…netTime]
          + debPkg[ntpdate]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[ntpdate]
          - bundle[…netTime]
        + bundle[…nodejs]
          + debPkgRepo[nodejs]
            = archs: null
            = components: ["main"]
            = debUrls: ["https://deb.nodesource.com/node_12.x/"]
            = deferPkgListUpdate: true
            = dists: ["%{codename}"]
            = keyUrls: ["/gpgkey/nodesource.gpg.key"]
            = keyVerify: {"gpgKeySummary": ["pub  4096R/68576280 2014-06-13 NodeSource <gpg@nodesource.com>", "sub  4096R/AA01DA2C 2014-06-13"], "sha512hex": ["fbd658af32f3c6d938b3ce5f126b8103a87f3ec871a986744a1d420b72cb56f7", "2228417c6ba4bbe07bf31e5a2b3b4e0611cdbebd989beeb2fa942dcb06fd5a18"]}
            = src: true
            = state: "enabled"
            ^ sysFacts[osVersion]
            + file[/etc/apt/sources.list.d/ubborg.nodejs.list]
              = content: ["# This file was generated using ubborg-planner-pmb\n",
¬¶            "deb     https://deb.nodesource.com/node_12.x/ focal main\n",
¬¶            "deb-src https://deb.nodesource.com/node_12.x/ focal main\n"]
              = enforcedGroup: "adm"
              = enforcedModes: "a-x,a=rX,ug+w"
              = enforcedOwner: "root"
              = mimeType: "text/plain"
              ^ file[/etc/apt/sources.list.d]
              - file[/etc/apt/sources.list.d/ubborg.nodejs.list]
            + file[/etc/apt/trusted.gpg.d/ubborg.nodejs.asc]
              = downloadUrls: ["https://deb.nodesource.com/gpgkey/nodesource.gpg.key"]
              = enforcedGroup: "root"
              = enforcedModes: "a=r"
              = enforcedOwner: "root"
              = mimeType: "text/plain"
              = verifyContent: {"gpgKeySummary": ["pub  4096R/68576280 2014-06-13 NodeSource <gpg@nodesource.com>", "sub  4096R/AA01DA2C 2014-06-13"], "sha512hex": ["fbd658af32f3c6d938b3ce5f126b8103a87f3ec871a986744a1d420b72cb56f7", "2228417c6ba4bbe07bf31e5a2b3b4e0611cdbebd989beeb2fa942dcb06fd5a18"]}
              + file[/etc/apt/trusted.gpg.d]
                = mimeType: "inode/directory"
                ^ file[/etc/apt]
                - file[/etc/apt/trusted.gpg.d]
              - file[/etc/apt/trusted.gpg.d/ubborg.nodejs.asc]
            - debPkgRepo[nodejs]
          + debPkg[nodejs]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[nodejs]
          + file[/usr/local/bin/nodejs]
            = content: "/usr/bin/node"
            = mimeType: "inode/symlink"
            ^ file[/usr/local/bin]
            - file[/usr/local/bin/nodejs]
          + file[/etc/npmrc]
            = content: ["audit = false\n",
¬¶            "package-lock = false\n",
¬¶            "registry = https://registry.npmjs.org/\n",
¬¶            "send-metrics = false\n",
¬¶            "update-notifier = false\n"]
            = enforcedGroup: "adm"
            = enforcedModes: "a-x,a=rX,ug+w"
            = enforcedOwner: "root"
            = mimeType: "text/plain"
            ^ file[/etc]
            - file[/etc/npmrc]
          - bundle[…nodejs]
        + bundle[…openbox]
          + debPkg[openbox]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[openbox]
          + debPkg[obconf]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[obconf]
          + debPkg[python-xdg]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[python-xdg]
          + debPkg[python3-xdg]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[python3-xdg]
          + debPkg[wbar]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[wbar]
          + debPkg[wbar-config]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[wbar-config]
          + debPkg[gnome-accessibility-themes]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = presenceMarker: "file:/usr/share/icons/HighContrast/32x32/"
            = state: "installed"
            - debPkg[gnome-accessibility-themes]
          + debPkg[wmbattery]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[wmbattery]
          + debPkg[wmbubble]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[wmbubble]
          - bundle[…openbox]
        + bundle[…remoteDesktop]
          + debPkg[x11vnc]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[x11vnc]
          + debPkg[remmina]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[remmina]
          + debPkg[remmina-plugin-nx]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[remmina-plugin-nx]
          + debPkg[remmina-plugin-rdp]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[remmina-plugin-rdp]
          + debPkg[remmina-plugin-secret]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[remmina-plugin-secret]
          + debPkg[remmina-plugin-spice]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[remmina-plugin-spice]
          + debPkg[remmina-plugin-vnc]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[remmina-plugin-vnc]
          + debPkg[remmina-plugin-www]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[remmina-plugin-www]
          + debPkg[remmina-plugin-xdmcp]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[remmina-plugin-xdmcp]
          - bundle[…remoteDesktop]
        + bundle[…remoteShell]
          + debPkg[openssh-server]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[openssh-server]
          - bundle[…remoteShell]
        + bundle[…rtfm]
          + debPkg[man-db]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[man-db]
          - bundle[…rtfm]
        + bundle[…shell]
          + debPkg[bash]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[bash]
          + debPkg[bash-completion]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[bash-completion]
          + debPkg[mingetty]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[mingetty]
          + debPkg[screen]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[screen]
          + debPkg[tmux]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[tmux]
          + debPkg[less]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[less]
          + debPkg[moreutils]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[moreutils]
          + debPkg[nano]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[nano]
          + debPkg[procps]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[procps]
          + debPkg[pv]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[pv]
          + debPkg[rename]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[rename]
          + debPkg[rlwrap]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[rlwrap]
          + debPkg[psmisc]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[psmisc]
          + debPkg[inotify-tools]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[inotify-tools]
          + debPkg[lockfile-progs]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[lockfile-progs]
          - bundle[…shell]
        + bundle[…sysCore]
          + debPkg[ubuntu-minimal]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[ubuntu-minimal]
          + debPkg[anacron]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[anacron]
          + debPkg[console-data]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[console-data]
          + debPkg[initramfs-tools]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[initramfs-tools]
          + debPkg[keyboard-configuration]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[keyboard-configuration]
          + debPkg[logrotate]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[logrotate]
          + debPkg[perl]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[perl]
          + debPkg[systemd]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[systemd]
          + file[/etc/systemd/system/ureadahead.service]
            = content: "/dev/null"
            = enforcedGroup: "adm"
            = enforcedModes: "a-x,a=rX,ug+w"
            = enforcedOwner: "root"
            = mimeType: "inode/symlink"
            ^ file[/etc/systemd/system]
            - file[/etc/systemd/system/ureadahead.service]
          - bundle[…sysCore]
        + bundle[…sysDrivers]
          + debPkg[ubuntu-drivers-common]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[ubuntu-drivers-common]
          + debPkg[linux-firmware]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[linux-firmware]
          - bundle[…sysDrivers]
        + bundle[…sysInstall]
          + debPkg[multistrap]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[multistrap]
          - bundle[…sysInstall]
        + bundle[…terminalEmus]
          + debPkg[sakura]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[sakura]
          + debPkg[gnome-terminal]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[gnome-terminal]
          + debPkg[dconf-cli]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[dconf-cli]
          - bundle[…terminalEmus]
        + bundle[…textEditors]
          + debPkg[featherpad]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[featherpad]
          + debPkg[mousepad]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[mousepad]
          - bundle[…textEditors]
        + bundle[…vcs]
          + debPkg[git]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[git]
          + debPkg[git-annex]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[git-annex]
          - bundle[…vcs]
        + bundle[…xorgBasics]
          + debPkg[unity-greeter]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[unity-greeter]
          + debPkg[xserver-xorg-input-all]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[xserver-xorg-input-all]
          + debPkg[xserver-xorg-input-evdev]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[xserver-xorg-input-evdev]
          + debPkg[xserver-xorg-input-joystick]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[xserver-xorg-input-joystick]
          + debPkg[xserver-xorg-input-mouse]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[xserver-xorg-input-mouse]
          + debPkg[xserver-xorg-input-wacom]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[xserver-xorg-input-wacom]
          + debPkg[x11-xserver-utils]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[x11-xserver-utils]
          + debPkg[xdiagnose]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[xdiagnose]
          + debPkg[xdotool]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[xdotool]
          + debPkg[xinput]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[xinput]
          + debPkg[xserver-xorg]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[xserver-xorg]
          + debPkg[libxcb-xtest0]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[libxcb-xtest0]
          + debPkg[xdg-utils]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[xdg-utils]
          + debPkg[xsel]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[xsel]
          + debPkg[xterm]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[xterm]
          + debPkg[scrot]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[scrot]
          + debPkg[wmctrl]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[wmctrl]
          - bundle[…xorgBasics]
        + bundle[…xorgClipboardPersist]
          + debPkg[parcellite]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[parcellite]
          + debPkg[unity-services]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "absent"
            - debPkg[unity-services]
          - bundle[…xorgClipboardPersist]
        + bundle[…xorgMesa]
          + debPkg[libgl1-mesa-glx]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[libgl1-mesa-glx]
          + debPkg[libegl1-mesa]
            = defer: true
            = policy: {"conflict": "flinch", "incompatible": "flinch", "tryPreserveOldConfig": true}
            = state: "installed"
            - debPkg[libegl1-mesa]
          - bundle[…xorgMesa]
        + bundle[…xorgXcb]
          ^ debPkg[libxcb-xtest0]
          - bundle[…xorgXcb]
        - stage[cjs:ubborg-usecase-rescuedisk-pmb/src/software/debPkg/]
      - bundle[…/src/software/debPkg/__stage__]
    * bundle[…/src/software/nonDebDrivers/]
    + bundle[…/src/software/npmPkg/__stage__]
      * stage[cjs:ubborg-usecase-rescuedisk-pmb/src/software/npmPkg/]
      - bundle[…/src/software/npmPkg/__stage__]
    - bundle[cjs:ubborg-usecase-rescuedisk-pmb]
  - stage[example_plans/vanilla]
